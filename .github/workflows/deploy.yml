name: Deploy Hirenest App to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1

jobs:
  # Stage 1: Test Backend
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      - name: Run backend tests
        run: |
          cd backend
          npm test

  # Stage 2: Test Frontend
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Run frontend tests
        run: |
          cd frontend
          npm test

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  # Stage 3: Build Docker Images
  build:
    name: Build Docker Images
    needs: [test-backend, test-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend
          # Set default ECR repository name if not in .env
          ECR_REPO_NAME=${ECR_REPOSITORY_BACKEND:-hirenest-backend}
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG
          echo "backend-image=$ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd frontend
          # Set default ECR repository name if not in .env
          ECR_REPO_NAME=${ECR_REPOSITORY_FRONTEND:-hirenest-frontend}
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG
          echo "frontend-image=$ECR_REGISTRY/$ECR_REPO_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

  # Stage 4: Deploy Backend
  deploy-backend:
    name: Deploy Backend
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Load environment variables
        run: |
          cd backend
          # Set default values if .env file doesn't exist or variables are missing
          export ECS_CLUSTER=${ECS_CLUSTER:-hirenest-cluster}
          export ECS_SERVICE_BACKEND=${ECS_SERVICE_BACKEND:-hirenest-backend-service}
          export ECS_TASK_DEFINITION_BACKEND=${ECS_TASK_DEFINITION_BACKEND:-hirenest-backend-task}
          echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV
          echo "ECS_SERVICE_BACKEND=$ECS_SERVICE_BACKEND" >> $GITHUB_ENV
          echo "ECS_TASK_DEFINITION_BACKEND=$ECS_TASK_DEFINITION_BACKEND" >> $GITHUB_ENV

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_BACKEND \
          --query taskDefinition > task-definition-backend.json

      - name: Update ECS task definition
        id: task-def-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-backend.json
          container-name: hirenest-backend
          image: ${{ needs.build.outputs.backend-image }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_BACKEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  # Stage 5: Deploy Frontend
  deploy-frontend:
    name: Deploy Frontend
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Load environment variables
        run: |
          cd frontend
          # Set default values if .env file doesn't exist or variables are missing
          export ECS_CLUSTER=${ECS_CLUSTER:-hirenest-cluster}
          export ECS_SERVICE_FRONTEND=${ECS_SERVICE_FRONTEND:-hirenest-frontend-service}
          export ECS_TASK_DEFINITION_FRONTEND=${ECS_TASK_DEFINITION_FRONTEND:-hirenest-frontend-task}
          echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV
          echo "ECS_SERVICE_FRONTEND=$ECS_SERVICE_FRONTEND" >> $GITHUB_ENV
          echo "ECS_TASK_DEFINITION_FRONTEND=$ECS_TASK_DEFINITION_FRONTEND" >> $GITHUB_ENV

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_FRONTEND \
          --query taskDefinition > task-definition-frontend.json

      - name: Update ECS task definition
        id: task-def-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-frontend.json
          container-name: hirenest-frontend
          image: ${{ needs.build.outputs.frontend-image }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_FRONTEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

  # Stage 6: Health Check and Verification
  health-check:
    name: Health Check and Verification
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Load environment variables
        run: |
          cd backend
          # Set default values if .env file doesn't exist or variables are missing
          export ECS_CLUSTER=${ECS_CLUSTER:-hirenest-cluster}
          export ECS_SERVICE_BACKEND=${ECS_SERVICE_BACKEND:-hirenest-backend-service}
          export ECS_SERVICE_FRONTEND=${ECS_SERVICE_FRONTEND:-hirenest-frontend-service}
          echo "ECS_CLUSTER=$ECS_CLUSTER" >> $GITHUB_ENV
          echo "ECS_SERVICE_BACKEND=$ECS_SERVICE_BACKEND" >> $GITHUB_ENV
          echo "ECS_SERVICE_FRONTEND=$ECS_SERVICE_FRONTEND" >> $GITHUB_ENV

      - name: Wait for services to be stable
        run: |
          echo "Waiting for backend service to be stable..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_BACKEND \
            --region $AWS_REGION
          
          echo "Waiting for frontend service to be stable..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_FRONTEND \
            --region $AWS_REGION

      - name: Get service endpoints
        id: endpoints
        run: |
          # Get backend endpoint
          BACKEND_ENDPOINT=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_BACKEND \
            --query 'services[0].loadBalancers[0].hostname' \
            --output text)
          
          # Get frontend endpoint
          FRONTEND_ENDPOINT=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE_FRONTEND \
            --query 'services[0].loadBalancers[0].hostname' \
            --output text)
          
          echo "backend-endpoint=$BACKEND_ENDPOINT" >> $GITHUB_OUTPUT
          echo "frontend-endpoint=$FRONTEND_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Test backend health
        run: |
          if [ "${{ steps.endpoints.outputs.backend-endpoint }}" != "None" ]; then
            echo "Testing backend health at: ${{ steps.endpoints.outputs.backend-endpoint }}"
            curl -f "http://${{ steps.endpoints.outputs.backend-endpoint }}/" || echo "Backend health check failed"
          else
            echo "Backend endpoint not available yet"
          fi

      - name: Test frontend health
        run: |
          if [ "${{ steps.endpoints.outputs.frontend-endpoint }}" != "None" ]; then
            echo "Testing frontend health at: ${{ steps.endpoints.outputs.frontend-endpoint }}"
            curl -f "http://${{ steps.endpoints.outputs.frontend-endpoint }}/" || echo "Frontend health check failed"
          else
            echo "Frontend endpoint not available yet"
          fi

      - name: Deployment Summary
        run: |
          echo "Deployment Complete!"
          echo "Backend: ${{ steps.endpoints.outputs.backend-endpoint }}"
          echo "Frontend: ${{ steps.endpoints.outputs.frontend-endpoint }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}" 